import com.google.common.io.Files
import freemarker.template.DefaultObjectWrapper
import freemarker.template.Template
import freemarker.template.TemplateExceptionHandler
import freemarker.template.Version
import groovy.io.FileType
import groovy.json.JsonSlurper
import groovy.transform.Immutable
import org.pegdown.PegDownProcessor

apply plugin: 'groovy'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath localGroovy()
        classpath 'org.freemarker:freemarker:2.3.21'
        classpath 'org.pegdown:pegdown:1.4.2'
        classpath 'com.google.guava:guava:18.0'
    }
}

dependencies {
}

task('copyResources', type:Copy) {
    from("$project.projectDir/src/main/resources/resources")
    into "$project.buildDir/website"
}

def processTemplates() {
    //TODO perform templating tasks and output
    JsonSlurper jsonSlurper = new JsonSlurper()
    FileExtensionMapper fileExtensionMapper = new FileExtensionMapper()
    PegDownProcessor markDownProcessor = new PegDownProcessor()
    TemplateProcessor templateProcessor = new TemplateProcessor(project.file("src/main/resources/templates"));

    File dir = new File(project.projectDir, "src/main/resources/contents/blog")
    def blogs = []
    dir.eachFile(FileType.FILES) { file ->
        if (Files.getFileExtension(file.getName()) == 'json') {
            def blogMetadata = jsonSlurper.parse(file)
            if(fileExtensionMapper.switchFileExtension(file, 'md').isFile()) {
                blogs << new Blog(blogMetadata.blogTitle, blogMetadata.pubDate, markDownProcessor.markdownToHtml(fileExtensionMapper.switchFileExtension(file, 'md').text))
            } else if (fileExtensionMapper.switchFileExtension(file, 'html').isFile()) {
                blogs << new Blog(blogMetadata.blogTitle, blogMetadata.pubDate, fileExtensionMapper.switchFileExtension(file, 'html').text)
            } else {
                throw new RuntimeException("$file.path does not have content file.")
            }
        }
    }
    blogs.sort(true).reverse(true)
    templateProcessor.processTemplate('index.html', ['blogs':blogs], new File(project.buildDir, 'website/index.html'))
}

task('buildSite', dependsOn:[':copyResources']) << {
    processTemplates();
}

@Immutable
class Blog implements Comparable {
    String title
    String date
    String content

    @Override
    int compareTo(Object o) {
        if (o instanceof Blog) {
            Date thisDate = Date.parse('mm/dd/yyyy', this.date)
            Date thatDate = Date.parse('mm/dd/yyyy', o.date)
            thisDate.compareTo(thatDate)
        } else {
            throw new RuntimeException("Can't compare Blog with ${o.class}")
        }
    }
}

class FileExtensionMapper {
    File switchFileExtension(File f, String newExtension) {
        File parent = f.parentFile
        String name = f.name
        int index = name.lastIndexOf('.')
        if(parent != null) {
            return index == -1 ? new File(parent, name + '.' + newExtension) : new File(parent, name.substring(0, index) + '.' + newExtension)
        } else {
            return index == -1 ? new File(name + '.' + newExtension) : new File(name.substring(0, index) + '.' + newExtension)
        }
    }

    String switchFileExtension(String s, String newExtension) {
        return switchFileExtension(new File(s), newExtension).path
    }

    String getExtension(File file) {
        String name = file.name
        int index = name.lastIndexOf('.')
        return index == -1 ? '' : name.substring(index+1)
    }

    String getExtension(String file) {
        return getExtension(new File(file))
    }
}

class TemplateProcessor {
    freemarker.template.Configuration cfg = new freemarker.template.Configuration();

    TemplateProcessor(File templateDirectory) {
        // Specify the data source where the template files come from. Here I set a
        // plain directory for it, but non-file-system are possible too:
        cfg.setDirectoryForTemplateLoading(templateDirectory);
        // Specify how templates will see the data-model. This is an advanced topic...
        // for now just use this:
        cfg.setObjectWrapper(new DefaultObjectWrapper());
        // Set your preferred charset template files are stored in. UTF-8 is
        // a good choice in most applications:
        cfg.setDefaultEncoding("UTF-8");
        // Sets how errors will appear. Here we assume we are developing HTML pages.
        // For production systems TemplateExceptionHandler.RETHROW_HANDLER is better.
        cfg.setTemplateExceptionHandler(TemplateExceptionHandler.HTML_DEBUG_HANDLER);
        // At least in new projects, specify that you want the fixes that aren't
        // 100% backward compatible too (these are very low-risk changes as far as the
        // 1st and 2nd version number remains):
        cfg.setIncompatibleImprovements(new Version(2, 3, 20));  // FreeMarker 2.3.20
    }

    def processTemplate(String templateName, def dataModel, File output) {
        File parent = output.getParentFile() //TODO add more checking here
        parent.mkdirs()
        Template template = cfg.getTemplate(templateName)
        OutputStream os = new FileOutputStream(output)
        Writer writer = new OutputStreamWriter(os)
        template.process(dataModel, writer)
        os.close()
    }

    String processTemplate(String templateName, def dataModel) {
        Template template = cfg.getTemplate(templateName)
        StringBuilder sb = new StringBuilder()
        Writer writer = new OutputStreamWriter(sb)
        template.process(dataModel, writer)
        return sb.toString()
    }
}
